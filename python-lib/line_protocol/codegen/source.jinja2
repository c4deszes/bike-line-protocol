#include "line_transport.h"
#include "line_application.h"
#include "line_diagnostics.h"
#include "line_api.h"

{% for channel in channels %}
{% for node in channel.nodes %}
{% for request in node.node.publishes %}
#ifndef LINE_REQUEST_{{request.name}}_FRAME_DEFINED
#define LINE_REQUEST_{{request.name}}_FRAME_DEFINED
LINE_Frame_{{request.name}}_t LINE_Request_{{request.name}}_data;
bool LINE_Request_{{request.name}}_flag_internal;
#endif
{% endfor %}

{% for request in node.node.subscribes %}
#ifndef LINE_REQUEST_{{request.name}}_FRAME_DEFINED
#define LINE_REQUEST_{{request.name}}_FRAME_DEFINED
LINE_Frame_{{request.name}}_t LINE_Request_{{request.name}}_data;
bool LINE_Request_{{request.name}}_flag_internal;
#endif
{% endfor %}
{% endfor %}
{% endfor %}

{% for channel in channels %}
{% for node in channel.nodes %}
    {% if node.diagnostics.enabled %}
static LINE_Diag_Config_t LINE_DiagConfig_{{channel.name}}_{{node.node.name}} = {
    .transport_channel = {{channel.channel}},

    {% if node.diagnostics.initAddress is boolean %}
        {% if node.diagnostics.initAddress %}
    .address = LINE_NODE_{{node.node.name}}_DIAG_ADDRESS,
        {% else %}
    .address = LINE_DIAG_UNICAST_UNASSIGNED_ID,
        {% endif %}
    {% else %}
    .address = {{ node.diagnostics.initAddress }},
    {% endif %}

    .on_wakeup = LINE_Diag_{{channel.name}}_{{node.node.name}}_OnWakeup,
    .on_idle = LINE_Diag_{{channel.name}}_{{node.node.name}}_OnIdle,
    .on_shutdown = LINE_Diag_{{channel.name}}_{{node.node.name}}_OnShutdown,
    .on_conditional_change_address = LINE_Diag_{{channel.name}}_{{node.node.name}}_OnConditionalChangeAddress,

    .op_status = LINE_Diag_{{channel.name}}_{{node.node.name}}_GetOperationStatus,
    .power_status = LINE_Diag_{{channel.name}}_{{node.node.name}}_GetPowerStatus,
    .serial_number = LINE_Diag_{{channel.name}}_{{node.node.name}}_GetSerialNumber,
    .software_version = LINE_Diag_{{channel.name}}_{{node.node.name}}_GetSoftwareVersion,
};
    {% endif %}
{% endfor %}
{% endfor %}

void LINE_App_Init(void) {
    {% for channel in channels %}
    LINE_Transport_Init({{channel.channel}}, {{'true' if channel.one_wire else 'false'}});
    {% for node in channel.nodes %}
    {% if node.diagnostics.enabled %}
    LINE_Diag_Init({{node.diagnostics.diag_channel}}, &LINE_DiagConfig_{{channel.name}}_{{node.node.name}});
    {% endif %}
    {% endfor %}
    {% endfor %}
}

void LINE_App_OnRequest(uint8_t channel, uint16_t request, uint8_t size, uint8_t* payload) {
    {% for channel in channels %}
    {% for node in channel.nodes %}
    {% for request in node.node.subscribes %}
    #ifndef LINE_REQUEST_{{request.name}}_ONREQUEST_HANDLED
    #define LINE_REQUEST_{{request.name}}_ONREQUEST_HANDLED
    if (channel == LINE_CHANNEL_{{channel.name}} && request == LINE_REQUEST_{{request.name}}_ID) {
        // TODO: reject request if size doesn't equal the request size
        for (int i = 0; i < LINE_REQUEST_{{request.name}}_SIZE; i++) {
            LINE_Request_{{request.name}}_data.data[i] = payload[i];
        }
        LINE_Request_{{request.name}}_flag_internal = true;
        return;
    }
    #endif
    {% endfor %}
    {% endfor %}
    {% endfor %}
}

bool LINE_App_RespondsTo(uint8_t channel, uint16_t request) {
    {% for channel in channels %}
    {% for node in channel.nodes %}
    {%- for request in node.node.publishes %}
    if (channel == LINE_CHANNEL_{{channel.name}} && request == LINE_REQUEST_{{request.name}}_ID) {
        return true;
    }
    {% endfor %}
    {% endfor %}
    {% endfor %}
    return false;
}

bool LINE_App_PrepareResponse(uint8_t channel, uint16_t request, uint8_t* size, uint8_t* payload) {
    {% for channel in channels %}
    {% for node in channel.nodes %}
    {%- for request in node.node.publishes %}
    #ifndef LINE_REQUEST_{{request.name}}_PREPARERESPONSE_HANDLED
    #define LINE_REQUEST_{{request.name}}_PREPARERESPONSE_HANDLED
    if (channel == LINE_CHANNEL_{{channel.name}} && request == LINE_REQUEST_{{request.name}}_ID) {
        *size = LINE_REQUEST_{{request.name}}_SIZE;
        for (int i = 0; i < LINE_REQUEST_{{request.name}}_SIZE; i++) {
            payload[i] = LINE_Request_{{request.name}}_data.data[i];
        }
        LINE_Request_{{request.name}}_flag_internal = true;
        return true;
    }
    #endif
    {% endfor %}
    {% endfor %}
    {% endfor %}
    return false;
}

{% for channel in channels %}
{% for node in channel.nodes %}
{% for request in node.node.publishes %}
#ifndef LINE_REQUEST_{{request.name}}_FLAG_DEFINED
#define LINE_REQUEST_{{request.name}}_FLAG_DEFINED
bool LINE_Request_{{request.name}}_flag(void) {
    if (LINE_Request_{{request.name}}_flag_internal) {
        LINE_Request_{{request.name}}_flag_internal = false;
        return true;
    }
    return false;
}
#endif
{% endfor %}
{% endfor %}
{% endfor %}

{% for channel in channels %}
{% for node in channel.nodes %}
{% for request in node.node.subscribes %}
#ifndef LINE_REQUEST_{{request.name}}_FLAG_DEFINED
#define LINE_REQUEST_{{request.name}}_FLAG_DEFINED
bool LINE_Request_{{request.name}}_flag(void) {
    if (LINE_Request_{{request.name}}_flag_internal) {
        LINE_Request_{{request.name}}_flag_internal = false;
        return true;
    }
    return false;
}
#endif
{% endfor %}
{% endfor %}
{% endfor %}
